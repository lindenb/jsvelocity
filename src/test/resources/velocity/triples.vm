interface RDFNode
	{
	public boolean isResource();
	public boolean isLiteral();
	public RDFModel getModel();
	}

interface Resource extends RDFNode
	{
	public String getUri();
	}

interface Literal extends RDFNode
	{
	public String getValue();
	}

interface Statement
	{
	public Resource getSubject();
	public Resource getPredicate();
	public RDFNode getObject();
	}

abstract class AbstractRDFModel
	{
	private abstract class RDFNode
		implements RDFNodeImpl
		{
		@Override
		public boolean isResource()
			{
			return false;
			}
		@Override
		public boolean isLiteral()
			{
			return false;
			}
		@Override
		public Model getModel()
			{
			return RDFModel.this;
			}
		}

	private class ResourceImpl
		extends RDFNodeImpl
		implements ResourceImpl
		{
		@Override
		public final boolean isResource()
			{
			return true;
			}
		public String getUri();
		}

	private class LiteralImpl
		extends RDFNodeImpl
		extends Literal
		{
		public final boolean isLiteral()
			{
			return true;
			}
		public String getValue();
		}



	private class StatementImpl implements Statement
		{
		private Resource subject=null;
		private Resource predicate=null;
		private RDFNode object=null;
		StatementImpl( Resource subject, Resource predicate,RDFNode object)
			{
			this.subject=subject;
			this.predicate=predicate;
			this.object=object;
			}
		public Resource getSubject()
			{
			return subject;
			}
		public Resource getPredicate()
			{
			return predicate;
			}
		public RDFNode getObject()
			{
			return object;
			}
		}
	}




